!CHAPTER Incompatible changes in ArangoDB 2.6

It is recommended to check the following list of incompatible changes **before** 
upgrading to ArangoDB 2.6, and adjust any client programs if necessary.

!SECTION Foxx changes

!SUBSECTION Foxx Queues

Foxx Queue job type definitions were previously based on functions and had to be registered before use. Due to changes in 2.5 this resulted in problems when restarting the server or defining job types incorrectly.

Function-based job types have been deprecated in 2.6 and will be removed entirely in 2.7.

In order to convert existing function-based job types to the new script-based job types, create custom scripts in your Foxx app and reference them by their name and the mount point of the app they are defined in. Official job types from the Foxx app store can be upgraded by upgrading from the 1.x version to the 2.x version of the same app.

In order to upgrade queued jobs to the new job types, you need to update the `type` property of the affected jobs in the database's `_jobs` system collection. In order to see the collection in the web interface you need to enable the collection type "System" in the collection list options.

Example:

Before: `"type": "mailer.postmark"`

After: `"type": {"name": "mailer", "mount": "/my-postmark-mailer"}`

!SUBSECTION Foxx Sessions

The options `jwt` and `type` of the controller method `controller.activateSessions` have been deprecated in 2.6 and will be removed entirely in 2.7.

If you want to use pure JWT sessions, you can use the `sessions-jwt` Foxx app from the Foxx app store.

If you want to use your own JWT-based sessions, you can use the JWT functions in the `crypto` module directly.

Instead of using the `type` option you can just use the `cookie` and `header` options on their own, which both now accept the value `true` to enable them with their default configurations.

!SECTION Changed behavior

!SUBSECTION AQL Graphs

In 2.6 the graph functions did undergo a performance lifting.
During this process we had to adopt the result format and the options for some of them.
In general all graph functions now have an option `includeData` which allows to trigger
if the result of this function should contain fully extracted documents `includeData: true`
or only the `_id` values `includeData: false`.
In most use cases the `_id` is sufficient to continue and the extraction of data is an unnecessary
operation.
Furthermore the result `SHORTEST_PATH` has changed. The old format returned a list of all vertices on the path.
Optionally it could include each sub-path for these vertices.
All of the documents were fully extracted.
Example:
```
[
  {
    vertex: {
      _id: "vertex/1",
      _key: "1",
      _rev: "1234"
      name: "Alice"
    },
    path: {
      vertices: [
        {
          _id: "vertex/1",
          _key: "1",
          _rev: "1234"
          name: "Alice"
        }
      ],
      edges: []
    }
  },
  {
    vertex: {
      _id: "vertex/2",
      _key: "2",
      _rev: "5678"
      name: "Bob"
    },
    path: {
      vertices: [
        {
          _id: "vertex/1",
          _key: "1",
          _rev: "1234"
          name: "Alice"
        }, {
          _id: "vertex/2",
          _key: "2",
          _rev: "5678"
          name: "Bob"
        }
      ],
      edges: [
        {
          _id: "edge/1",
          _key: "1",
          _rev: "9876",
          type: "loves"
        }
      ]
    }
  }
]
```

The new version is more compact.
Each `SHORTEST_PATH` will only return one document having the attributes `vertices`, `edges`, `distance`.
The `distance` is computed taking into account the given weight.
Optionally the documents can be extracted with `includeData: true`
Example:
```
{
  vertices: [
    "vertex/1",
    "vertex/2"
  ],
  edges: [
    "edge/1"
  ],
  distance: 1
}
```

The next function that returns a different format is `NEIGHBORS`.
Since 2.5 it returned an object with `edge` and `vertex` for each connected edge.
Example:
```
[
  {
    vertex: {
      _id: "vertex/2",
      _key: "2",
      _rev: "5678"
      name: "Bob"
    },
    edge: {
      _id: "edge/1",
      _key: "1",
      _rev: "9876",
      type: "loves"
    }
  } 
]
```
With 2.6 it will only return the vertex directly, again using `includeData: true`.
By default it will return a distinct set of neighbors, using the option `distinct: false` will include the same vertex for each edge pointing to it.
Example:
```
[
  "vertex/2"
]
```

<<<<<<< HEAD
!SECTION Function and API changes

!SUBSECTION Graph measurements functions

All graph measurements functions in JavaScript module `general-graph` that calculated a 
single figure previously returned an array containing just the figure. Now these functions 
will return the figure directly and not put it inside an array.

The affected functions are:

* `graph._absoluteEccentricity`
* `graph._eccentricity`
* `graph._absoluteCloseness`
* `graph._closeness`
* `graph._absoluteBetweenness`
* `graph._betweenness`
* `graph._radius`
* `graph._diameter`

Client programs calling these functions should be adjusted so they process the scalar value
returned by the function instead of the previous array value.

!SUBSECTION Cursor API

A batchSize value `0` is now disallowed when calling the cursor API via HTTP 
`POST /_api/cursor`.
